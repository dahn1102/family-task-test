@page "/manage-tasks"
@inject HttpClient Http
@using FamilyTask.Components
@using FamilyTask.Shared.Components
@using System.Collections.Generic
@using WebClient.Abstractions

@if (isLoaded)
{
    <div class="page-wrapper row m-0 col-12 p-0">
        <div class="col-4 p-0">
            <LeftMenu MenuItems="@leftMenuItem.ToArray()" OnAddItem="@onAddItem" />
        </div>
        <div class="col-8 p-0">
            @if (showLister)
            {
                <div class="col-10 offset-1 pt-5">
                    <div class="row m-0">
                        <Field class="col-9 p-0 custom-input">
                            <TextEdit Placeholder="Enter New Task" />
                        </Field>
                        <div class="col-3 p-0 text-right">
                            <Button class="add-btn px-4" @onclick="onTaskAdd">Add</Button>
                        </div>
                    </div>
                </div>
                <div class="col-10 offset-1">
                    <TaskListerComponent Tasks="@tasksToShow.ToArray()" />
                </div>
            }
            @if (showCreator)
            {
                <div class="col-10 offset-1 pt-5">
                    <FamilyMemberCreator onAddCallback="@onMemberAdd" />
                </div>
            }
        </div>
    </div>
}

@code {
    private List<FamilyMember> members = new List<FamilyMember>();
    private List<MenuItem> leftMenuItem = new List<MenuItem>();
    private List<TaskModel> tasksToShow = new List<TaskModel>();
    private List<TaskModel> allTasks = new List<TaskModel>();
    private Guid assignedToId;
    private bool isLoaded;
    private bool showLister;
    private bool showCreator;
    [Inject]
    private IMemberDataService MemberDataService { get; set; }
    [Inject]
    private ITaskDataService TaskDataService { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var result = await MemberDataService.GetAllMembers();
        var tasks = await TaskDataService.GetAllTasks();
        Console.WriteLine(result.Payload);
        if (result != null && result.Payload != null && result.Payload.Any())
        {
            foreach (var member in result.Payload)
            {
                members.Add(new FamilyMember()
                {
                    firstname = member.FirstName,
                    lastname = member.LastName,
                    email = member.Email,
                    avtar = member.Avatar,
                    role = member.Roles,
                    id = member.Id
                });
            }

            foreach (var member in members)
            {
                leftMenuItem.Add(new MenuItem()
                {
                    iconColor = member.avtar,
                    label = member.firstname,
                    referenceId = member.id
                });
            }

            if (tasks != null && tasks.Payload != null && tasks.Payload.Any()) {
                foreach (var task in tasks.Payload) {
                    tasksToShow.Add(new TaskModel() {
                        id = task.Id,
                        text = task.Subject,
                        isDone = task.IsComplete
                    });
                }
            }

            isLoaded = true;
            showLister = true;
        }
    }

    private void onAddItem()
    {
        showCreator = true;
        showLister = false;
        StateHasChanged();
    }



    private async Task onMemberAdd(FamilyMember member)
    {
        Console.WriteLine("on member add");
        var result = await MemberDataService.Create(new Domain.Commands.CreateMemberCommand()
        {
            Avatar = member.avtar,
            FirstName = member.firstname,
            LastName = member.lastname,
            Email = member.email,
            Roles = member.role
        });

        if (result != null && result.Payload != null && result.Payload.Id != Guid.Empty)
        {
            members.Add(new FamilyMember()
            {
                firstname = result.Payload.FirstName,
                lastname = result.Payload.LastName,
                email = result.Payload.Email,
                avtar = result.Payload.Avatar,
                role = result.Payload.Roles,
                id = result.Payload.Id
            });
            leftMenuItem.Add(new MenuItem()
            {
                iconColor = result.Payload.Avatar,
                label = result.Payload.FirstName,
                referenceId = result.Payload.Id
            });
            showCreator = false;
            showLister = true;
            StateHasChanged();
        }
    }

    private async void onTaskAdd(TaskModel task) {
        var result = await TaskDataService.Create(new Domain.Commands.CreateTaskCommand() {
            Subject = task.text,
            IsComplete = task.isDone,
            AssignedToID = assignedToId
        });

        if (result != null && result.Payload != null && result.Payload.Id != Guid.Empty) {
            tasksToShow.Add(new TaskModel() { 
                text = result.Payload.Subject,
                isDone = result.Payload.IsComplete,
                id = result.Payload.Id
            });
        }
    }
}